function c = nr_poly(A, z)
    % Compute the Numerical Range of a matrix polynomial using a rotation method
    % Input: 
    %   A - a cell array containing the matrices A0, A1, ..., An
    %   z - a scalar complex value representing the variable z in the polynomial
    % Output:
    %   c - boundary points of the Numerical Range of the matrix polynomial

    nv = 280000;  % Number of points for rotation method
    n = size(A{1}, 1);  % Dimension of the matrix
    f = zeros(1, nv);  % Preallocate the boundary points array

    % Use polyvalm to evaluate the matrix polynomial at the scalar z
    e = eig(polyvalm(A, z));  % Eigenvalues of the matrix polynomial at z

    % Loop to compute the boundary of the Numerical Range
    for k = 1:nv
        zk = exp(1i * (k-1) / nv * 2 * pi);  % Rotation angle on the unit circle
        
        % Evaluate the matrix polynomial at zk using polyvalm
        Ak = polyvalm(A, zk);
        
        % Take the Hermitian part of Ak (ensure real eigenvalues)
        Ak = (Ak + Ak') / 2;
        
        % Compute the eigenvectors and eigenvalues of Ak
        [X, D] = eig(Ak);
        
        % Sort the eigenvalues based on their real parts
        [~, w] = sort(real(diag(D)));
        
        % Select the eigenvector corresponding to the largest eigenvalue
        x = X(:, w(n));
        
        % Compute the boundary point of the Numerical Range
        f(k) = x' * Ak * x / (x' * x);
    end

    % Close the boundary by connecting the last and the first points
    f(nv+1) = f(1);
    c = f;  % Return the boundary points

    % Filter eigenvalues with real part less than -2
    eleft = e(real(e) < -2);
    if ~isempty(eleft)
        x = real(eleft);
        y = imag(eleft);
        theta = atan2(y, x + 20);
        [theta, ind] = sort(theta, 'descend');
        x = x(ind);
        y = y(ind);
        fill(x, y, 'b*');  % Plot filtered eigenvalues
    end

    % Plot the boundary of the Numerical Range
    plot(real(f), imag(f), 'b');
    hold on;
    
    % Plot all eigenvalues
    plot(real(e), imag(e), '*r');

    % Add labels, title, and other plot details
    title('Numerical Range of P(z)');
    xlabel('Real Axis');
    ylabel('Imaginary Axis');
    text(-17, -25, 'W(P(z))');
    
    % Adjust axis limits dynamically based on the plot
    axis equal;
    grid on;
    hold off;
end
