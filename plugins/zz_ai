import random
import re

import requests
from AlinaMusic import app
from MukeshAPI import api
from pyrogram import filters
from pyrogram.enums import ChatAction

# List of supported emojis for reactions
EMOJI_LIST = [
    "üëç",
    "üëé",
    "‚ù§Ô∏è",
    "üî•",
    "ü•≥",
    "üëè",
    "üòÅ",
    "üòÇ",
    "üò≤",
    "üò±",
    "üò¢",
    "üò≠",
    "üéâ",
    "üòá",
    "üòç",
    "üòÖ",
    "üí©",
    "üôè",
    "ü§ù",
    "üçì",
    "üéÉ",
    "üëÄ",
    "üíØ",
    "üòé",
    "ü§ñ",
    "üêµ",
    "üëª",
    "üéÑ",
    "ü•Ç",
    "üéÖ",
    "‚ùÑÔ∏è",
    "‚úçÔ∏è",
    "üéÅ",
    "ü§î",
    "üíî",
    "ü•∞",
    "üò¢",
    "ü•∫",
    "üôà",
    "ü§°",
    "üòã",
    "üéä",
    "üçæ",
    "üåü",
    "üë∂",
    "ü¶Ñ",
    "üí§",
    "üò∑",
    "üë®‚Äçüíª",
    "üçå",
    "üçì",
    "üíÄ",
    "üë®‚Äçüè´",
    "ü§ù",
    "‚ò†Ô∏è",
    "üéØ",
    "üçï",
    "ü¶æ",
    "üî•",
    "üíÉ",
]


# Function to send a random emoji reaction
async def react_with_random_emoji(client, message):
    try:
        emoji = random.choice(EMOJI_LIST)
        await app.send_reaction(message.chat.id, message.id, emoji)
    except Exception as e:
        # If sending the reaction fails, just log the error silently and
        # continue
        print(f"Failed to send reaction: {str(e)}")


# Function to convert text to small caps
def to_small_caps(text):
    small_caps = {
        "a": "·¥Ä",
        "b": " ô",
        "c": "·¥Ñ",
        "d": "·¥Ö",
        "e": "·¥á",
        "f": "“ì",
        "g": "…¢",
        "h": " ú",
        "i": "…™",
        "j": "·¥ä",
        "k": "·¥ã",
        "l": " ü",
        "m": "·¥ç",
        "n": "…¥",
        "o": "·¥è",
        "p": "·¥ò",
        "q": "«´",
        "r": " Ä",
        "s": "s",
        "t": "·¥õ",
        "u": "·¥ú",
        "v": "·¥†",
        "w": "·¥°",
        "x": "x",
        "y": " è",
        "z": "·¥¢",
    }

    words = text.split()
    transformed_words = []

    for word in words:
        if word.startswith("@"):
            # Leave the username as it is
            transformed_words.append(word)
        else:
            # Convert the word to small caps
            transformed_words.append(
                "".join(small_caps.get(char, char) for char in word.lower())
            )

    return " ".join(transformed_words)


# Function to determine if the response contains a link
def contains_link(text):
    return bool(re.search(r"http[s]?://", text))


# Function to format the response based on content
def format_response(text):
    if contains_link(text):
        return text
    else:
        return to_small_caps(text)


# Function to truncate text to a maximum of 50 words
def truncate_text(text, max_words=50):
    words = text.split()
    if len(words) > max_words:
        return " ".join(words[:max_words]) + "..."
    return text


# Handler for direct messages (DMs)
@app.on_message(filters.private & ~filters.service)
async def gemini_dm_handler(client, message):
    # Attempt to send a reaction
    await react_with_random_emoji(client, message)
    await app.send_chat_action(message.chat.id, ChatAction.TYPING)

    user_input = message.text

    try:
        response = api.gemini(user_input)
        x = response.get("results")
        image_url = response.get("image_url")

        if x:
            formatted_response = format_response(truncate_text(x))
            if image_url:
                await message.reply_photo(
                    image_url, caption=formatted_response, quote=True
                )
            else:
                await message.reply_text(formatted_response, quote=True)
        else:
            await message.reply_text(
                to_small_caps("s·¥è Ä Ä è s…™ Ä! ·¥ò ü·¥á·¥Äs·¥á T Ä è ·¥Ä…¢·¥Ä…™…¥"), quote=True
            )
    except requests.exceptions.RequestException as e:
        pass
